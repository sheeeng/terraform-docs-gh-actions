name: release
run-name: release v${{ github.event.inputs.version }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: "gh-actions version to be released (without leading v)"
        required: true
        type: string

env:
  GOMPLATE_VERSION: "v3.8.0"
  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.COMMITTER_TOKEN }}

      - name: Install gomplate
        run: |
          sudo curl -o /usr/local/bin/gomplate -sSL https://github.com/hairyhenderson/gomplate/releases/download/${{ env.GOMPLATE_VERSION }}/gomplate_linux-amd64
          sudo chmod 755 /usr/local/bin/gomplate

      - name: Get variables
        run: |
          release_version="${{ inputs.version }}"
          echo "release_version=${release_version//v/}" >> "$GITHUB_ENV"

      - name: Prepare v${{ env.release_version }} Release
        run: |
          ./.github/scripts/prepare-release.sh ${{ env.release_version }}

      - name: Push v${{ env.release_version }} Changes
        uses: stefanzweifel/git-auto-commit-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
        with:
          file_pattern: "README.md action.yml"
          commit_message: "chore: prepare release v${{ env.release_version }}"
          commit_user_name: terraform-docs-bot
          commit_user_email: bot@terraform-docs.io
          commit_author: "terraform-docs-bot <bot@terraform-docs.io>"
          commit_options: "--signoff"

  docker:
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Get variables
        run: |
          release_version="${{ inputs.version }}"
          echo "release_version=${release_version//v/}" >> "$GITHUB_ENV"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker
        uses: docker/login-action@v3
        if: env.REGISTRY_USERNAME != ''
        with:
          registry: quay.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        if: env.REGISTRY_USERNAME != ''
        uses: docker/build-push-action@v6
        with:
          outputs: "type=registry"
          platforms: linux/amd64,linux/arm64
          push: true
          tags: quay.io/${{ github.event.repository.name }}/gh-actions:latest,quay.io/${{ github.event.repository.name }}/gh-actions:${{ env.release_version }}

  update-tag:
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.COMMITTER_TOKEN }}

      - name: Get variables
        run: |
          release_version="${{ inputs.version }}"
          echo "release_version=${release_version//v/}" >> "$GITHUB_ENV"

      - name: Cut v${{ env.release_version }} Release
        run: |
          git config --global user.name terraform-docs-bot
          git config --global user.email bot@terraform-docs.io

          git tag "v${{ env.release_version }}"
          git push origin "v${{ env.release_version }}"

          VERSION=$(echo ${{ env.release_version }} | cut -d. -f1)
          git tag -f v${VERSION}
          git push -f v${VERSION}
